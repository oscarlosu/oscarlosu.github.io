// When the user clicks anywhere outside of a modal, close all modals
window.onclick = function(event) {
    if (event.target.className == "modal") {
        var modals = document.getElementsByClassName("modal");
        for (var index = 0; index < modals.length; index++) {
            modals[index].style.display='none';            
        }
    }
}

function OpenModal(id)
{
    document.getElementById(id).style.display='block';
}

function CloseModal(id)
{
    document.getElementById(id).style.display='none';
}

function MakeModal(id, imgPath, caption)
{
    var modalId = GenerateId ();
    var container = document.getElementById(id);
    container.innerHTML = 
    '<figure>' +
        '<img src=' + imgPath + ' onclick="OpenModal(\'' + modalId + '\')" class="openModal">' +
        '<figcaption class="captionOpenModal smallestText">' + caption + '</figcaption>' + 
    '</figure>' +
    '<div class="modal" id="' + modalId + '">' + 
        '<div class="modalContent">' + 
            '<span class="closeModal" onclick="CloseModal(\'' + modalId + '\')">&times;</span>' + 
            'igure>' +
                '<img src=' + imgPath + ' style="width:100%">' + 
                '<figcaption class="captionModal smallestText">' + caption + '</figcaption>' + 
            '</figure>' + 
        '</div>' +
    '</div>'; 
}


// Generate unique IDs for use as pseudo-private/protected names.
// Similar in concept to
// <http://wiki.ecmascript.org/doku.php?id=strawman:names>.
//
// The goals of this function are twofold:
// 
// * Provide a way to generate a string guaranteed to be unique when compared
//   to other strings generated by this function.
// * Make the string complex enough that it is highly unlikely to be
//   accidentally duplicated by hand (this is key if you're using `ID`
//   as a private/protected name on an object).
//
// Use:
//
//     var privateName = ID();
//     var o = { 'public': 'foo' };
//     o[privateName] = 'bar';
function GenerateId () {
  // Math.random should be unique because of its seeding algorithm.
  // Convert it to base 36 (numbers + letters), and grab the first 9 characters
  // after the decimal.
  return '_' + Math.random().toString(36).substr(2, 9);
};